plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.0'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.7.22'
}

group = 'com.market'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17

jar {
    enabled = true
}

bootJar {
    enabled = false
}

allprojects {
    repositories {
        mavenCentral()
    }
}

def springProjects = [
        project('common'),
        project('point'),
        project('product'),
        project('order'),
]

configure(springProjects) {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "org.asciidoctor.jvm.convert"
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.plugin.spring'

    configurations {
        asciidoctorExtensions
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'io.kotest:kotest-runner-junit5-jvm:4.6.0'
        implementation 'org.projectlombok:lombok:1.18.18'

        runtimeOnly 'com.h2database:h2'
        runtimeOnly 'com.mysql:mysql-connector-j'
        implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
        annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
        annotationProcessor "jakarta.annotation:jakarta.annotation-api"
        annotationProcessor "jakarta.persistence:jakarta.persistence-api"
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'

        implementation 'org.jetbrains.kotlin:kotlin-reflect'

        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
        testImplementation 'io.rest-assured:rest-assured'

        asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    }

    ext {
        set('snippetsDir', file("build/generated-snippets"))
    }

    test {
        outputs.dir snippetsDir
        useJUnitPlatform()
    }

    tasks.named('asciidoctor') {
        configurations 'asciidoctorExtensions'
        baseDirFollowsSourceFile()
        inputs.dir snippetsDir
        dependsOn test
    }

    compileKotlin {
        kotlinOptions.freeCompilerArgs = ["-Xjsr305=strict"]
        kotlinOptions.jvmTarget = "15"
    }

    asciidoctor.doFirst {
        delete file('src/main/resources/static/docs')
    }

    task createDocument(type: Copy) {
        dependsOn asciidoctor
        from file("build/docs/asciidoc")
        into file("src/main/resources/static")
    }


    def generated = "$buildDir/generated/querydsl"

    tasks.withType(JavaCompile) {
        options.getGeneratedSourceOutputDirectory().set(file(generated))
    }

    sourceSets {
        main.java.srcDirs += [generated]
    }

    clean {
        delete file(generated)
    }
}
